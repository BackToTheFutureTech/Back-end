# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'
    
stages:
- stage: Build
  jobs:
  - job:
    variables: 
    - group: madday-backend-variables
    steps:
    - script: sudo ./build.sh
      displayName: 'Running Build Script'

    - task: DotNetCoreCLI@2
      displayName: Publish to $(Build.ArtifactStagingDirectory)
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'src/**/*.csproj'
        arguments: '-c Release -o "$(Build.ArtifactStagingDirectory)"'
        
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'MAD_Days'
        publishLocation: 'Container'

- stage: Deploy
  jobs: 
    - job:

      variables:
      - group: madday-backend-variables

      steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: LambdaDeployFunction@1
        displayName: 'Deploy Lambda Function'
        inputs:
          awsCredentials: 'AWS Root'
          regionName: 'eu-west-2'
          deploymentMode: 'codeandconfiguration'
          functionName: 'MyFunctionCreateFromAzureDevops'
          description: 'From AzureDevops'
          functionHandler: 'awsLambdaCICDPipeline::awsLambdaCICDPipeline.Function::FunctionHandler'
          runtime: 'dotnetcore3.1'
          codeLocation: 'localfile'
          localZipFile: '$(Build.ArtifactStagingDirectory)/drop/awsLambdaCICDPipeline.zip'
          roleARN: '$(AWS-Lambda-ARN)'
  dependsOn:
  - Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/main'))